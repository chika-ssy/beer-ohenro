{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/chika/cordings/beerOHENRO/frontend/src/components/BreweryMap.tsx"],"sourcesContent":["// src/components/BreweryMap.tsx\r\nimport { GoogleMap, Marker, useJsApiLoader } from '@react-google-maps/api';\r\nimport { useMemo } from 'react';\r\n\r\ntype Brewery = {\r\n  name: string;\r\n  latitude: number;\r\n  longitude: number;\r\n};\r\n\r\ntype UserLocation = {\r\n  lat: number;\r\n  lng: number;\r\n};\r\n\r\ntype Props = {\r\n  breweries: Brewery[];\r\n  userLocation: UserLocation | null;  // 現在地を取得\r\n};\r\n\r\nconst containerStyle = {\r\n  width: '100%',\r\n  height: '500px',\r\n};\r\n\r\nexport default function BreweryMap({ breweries, userLocation }: Props) {\r\n  const { isLoaded } = useJsApiLoader({\r\n    googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || '',\r\n  });\r\n\r\n  const center = useMemo(() => {\r\n    return userLocation || { lat: 34.3428, lng: 134.0466 }; // ← 現在地があれば優先(デフォルト:高松市)\r\n  }, [userLocation]);\r\n\r\n  if (!isLoaded) \r\n    return <p>Loading Map...</p>;\r\n\r\n    return (\r\n      <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={10}>\r\n        {/* 現在地マーカー */}\r\n        {userLocation && (\r\n          <Marker\r\n            position={userLocation}\r\n            title=\"現在地\"\r\n            icon={{\r\n              url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\r\n            }}\r\n          />\r\n        )}\r\n\r\n        {/* ブルワリーマーカー */}\r\n        {breweries.map((brewery, index) => (\r\n          <Marker\r\n            key={`${brewery.name}-${index}`}\r\n            position={{ lat: brewery.latitude, lng: brewery.longitude }}\r\n            title={brewery.name}\r\n          />\r\n        ))}\r\n      </GoogleMap>\r\n    );\r\n}"],"names":[],"mappings":"AAAA,gCAAgC;;;;AA2BV;;AA1BtB;AACA;;;;;AAkBA,MAAM,iBAAiB;IACrB,OAAO;IACP,QAAQ;AACV;AAEe,SAAS,WAAW,EAAE,SAAS,EAAE,YAAY,EAAS;;IACnE,MAAM,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,kKAAA,CAAA,iBAAc,AAAD,EAAE;QAClC,kBAAkB,+EAA+C;IACnE;IAEA,MAAM,SAAS,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;sCAAE;YACrB,OAAO,gBAAgB;gBAAE,KAAK;gBAAS,KAAK;YAAS,GAAG,yBAAyB;QACnF;qCAAG;QAAC;KAAa;IAEjB,IAAI,CAAC,UACH,qBAAO,6LAAC;kBAAE;;;;;;IAEV,qBACE,6LAAC,kKAAA,CAAA,YAAS;QAAC,mBAAmB;QAAgB,QAAQ;QAAQ,MAAM;;YAEjE,8BACC,6LAAC,kKAAA,CAAA,SAAM;gBACL,UAAU;gBACV,OAAM;gBACN,MAAM;oBACJ,KAAK;gBACP;;;;;;YAKH,UAAU,GAAG,CAAC,CAAC,SAAS,sBACvB,6LAAC,kKAAA,CAAA,SAAM;oBAEL,UAAU;wBAAE,KAAK,QAAQ,QAAQ;wBAAE,KAAK,QAAQ,SAAS;oBAAC;oBAC1D,OAAO,QAAQ,IAAI;mBAFd,GAAG,QAAQ,IAAI,CAAC,CAAC,EAAE,OAAO;;;;;;;;;;;AAO3C;GAnCwB;;QACD,kKAAA,CAAA,iBAAc;;;KADb","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/chika/cordings/beerOHENRO/frontend/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport Image from \"next/image\";\nimport { useEffect, useState } from 'react';\nimport BreweryMap from '@/components/BreweryMap';\n\ntype Brewery = {\n  name: string;\n  latitude: number;\n  longitude: number;\n};\n\ntype UserLocation = {\n  lat: number;\n  lng: number;\n};\n\nexport default function Home() {\n  const [breweries, setBreweries] = useState<Brewery[]>([]);\n  const [userLocation, setUserLocation] = useState<UserLocation | null>(null);\n  // ブルワリーデータの取得\n  useEffect(() => {\n    fetch('http://localhost:8000/api/breweries') // FastAPI から brewery 情報を取得\n      .then((res) => res.json())\n      .then((data) => {\n        const validData = data\n          // ダミーデータ（例: \"ブランド名\" というIDのもの）を除外\n          .filter((b: any) => b.id !== 'ブランド名')\n          // 必要な情報を整形・数値化（lat/lngは文字列で来ることがあるため）\n          .map((b: any, index: number) => ({\n            name: (b.brand || b.name || `不明${index}`) + `_${index}`, // ← 重複防止\n            latitude: parseFloat(b.lat || b.latitude || 'NaN'),\n            longitude: parseFloat(b.lng || b.longitude || 'NaN'),\n          }))\n          // 緯度経度が有効な数値であるものだけを抽出\n          .filter(\n            (b: Brewery) =>\n              typeof b.latitude === 'number' &&\n              typeof b.longitude === 'number' &&\n              !isNaN(b.latitude) &&\n              !isNaN(b.longitude)\n          );\n\n        // 最終的なデータを state にセット\n        console.log(validData);\n        setBreweries(validData);\n\n      })\n      .catch((err) => console.error('Error fetching breweries:', err));\n  }, []);\n\n  // 現在地の取得\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          // 緯度経度を state に保存\n          setUserLocation({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          });\n        },\n        (error) => {\n          console.error('現在地を取得できませんでした:', error);\n        }\n      );\n    } else {\n      console.error('Geolocation API はこのブラウザでサポートされていません');\n    }\n  }, []);\n\n  return (\n    <div>\n      <h1>ブルワリー一覧</h1>\n      <ul>\n        {breweries.map((brewery, index) => (\n          <li key={`${brewery.name}-${index}`}>\n            {brewery.name}（{brewery.latitude}, {brewery.longitude}）\n          </li>\n        ))}\n      </ul>\n      {/* 地図に現在地を渡す */}\n      <BreweryMap breweries={breweries} userLocation={userLocation} />\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAGA;AACA;;;AAJA;;;AAiBe,SAAS;;IACtB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAa,EAAE;IACxD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAuB;IACtE,cAAc;IACd,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;0BAAE;YACR,MAAM,uCAAuC,2BAA2B;aACrE,IAAI;kCAAC,CAAC,MAAQ,IAAI,IAAI;iCACtB,IAAI;kCAAC,CAAC;oBACL,MAAM,YAAY,IAChB,iCAAiC;qBAChC,MAAM;oDAAC,CAAC,IAAW,EAAE,EAAE,KAAK;kDAC7B,sCAAsC;qBACrC,GAAG;oDAAC,CAAC,GAAQ,QAAkB,CAAC;gCAC/B,MAAM,CAAC,EAAE,KAAK,IAAI,EAAE,IAAI,IAAI,CAAC,EAAE,EAAE,OAAO,IAAI,CAAC,CAAC,EAAE,OAAO;gCACvD,UAAU,WAAW,EAAE,GAAG,IAAI,EAAE,QAAQ,IAAI;gCAC5C,WAAW,WAAW,EAAE,GAAG,IAAI,EAAE,SAAS,IAAI;4BAChD,CAAC;kDACD,uBAAuB;qBACtB,MAAM;oDACL,CAAC,IACC,OAAO,EAAE,QAAQ,KAAK,YACtB,OAAO,EAAE,SAAS,KAAK,YACvB,CAAC,MAAM,EAAE,QAAQ,KACjB,CAAC,MAAM,EAAE,SAAS;;oBAGxB,sBAAsB;oBACtB,QAAQ,GAAG,CAAC;oBACZ,aAAa;gBAEf;iCACC,KAAK;kCAAC,CAAC,MAAQ,QAAQ,KAAK,CAAC,6BAA6B;;QAC/D;yBAAG,EAAE;IAEL,SAAS;IACT,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;0BAAE;YACR,IAAI,UAAU,WAAW,EAAE;gBACzB,UAAU,WAAW,CAAC,kBAAkB;sCACtC,CAAC;wBACC,kBAAkB;wBAClB,gBAAgB;4BACd,KAAK,SAAS,MAAM,CAAC,QAAQ;4BAC7B,KAAK,SAAS,MAAM,CAAC,SAAS;wBAChC;oBACF;;sCACA,CAAC;wBACC,QAAQ,KAAK,CAAC,mBAAmB;oBACnC;;YAEJ,OAAO;gBACL,QAAQ,KAAK,CAAC;YAChB;QACF;yBAAG,EAAE;IAEL,qBACE,6LAAC;;0BACC,6LAAC;0BAAG;;;;;;0BACJ,6LAAC;0BACE,UAAU,GAAG,CAAC,CAAC,SAAS,sBACvB,6LAAC;;4BACE,QAAQ,IAAI;4BAAC;4BAAE,QAAQ,QAAQ;4BAAC;4BAAG,QAAQ,SAAS;4BAAC;;uBAD/C,GAAG,QAAQ,IAAI,CAAC,CAAC,EAAE,OAAO;;;;;;;;;;0BAMvC,6LAAC,mIAAA,CAAA,UAAU;gBAAC,WAAW;gBAAW,cAAc;;;;;;;;;;;;AAGtD;GApEwB;KAAA","debugId":null}}]
}